{
  "_args": [
    [
      {
        "raw": "connect-inject@git+https://github.com/petehunt/connect-inject.git",
        "scope": null,
        "escapedName": "connect-inject",
        "name": "connect-inject",
        "rawSpec": "git+https://github.com/petehunt/connect-inject.git",
        "spec": "git+https://github.com/petehunt/connect-inject.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:petehunt/connect-inject.git",
          "sshUrl": "git+ssh://git@github.com/petehunt/connect-inject.git",
          "httpsUrl": "git+https://github.com/petehunt/connect-inject.git",
          "gitUrl": "git://github.com/petehunt/connect-inject.git",
          "shortcut": "github:petehunt/connect-inject",
          "directUrl": "https://raw.githubusercontent.com/petehunt/connect-inject/master/package.json"
        }
      },
      "C:\\xampp\\htdocs\\gregg\\node_modules\\authbox"
    ]
  ],
  "_from": "git+https://github.com/petehunt/connect-inject.git",
  "_id": "connect-inject@0.4.0",
  "_inCache": true,
  "_location": "/connect-inject",
  "_phantomChildren": {},
  "_requested": {
    "raw": "connect-inject@git+https://github.com/petehunt/connect-inject.git",
    "scope": null,
    "escapedName": "connect-inject",
    "name": "connect-inject",
    "rawSpec": "git+https://github.com/petehunt/connect-inject.git",
    "spec": "git+https://github.com/petehunt/connect-inject.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:petehunt/connect-inject.git",
      "sshUrl": "git+ssh://git@github.com/petehunt/connect-inject.git",
      "httpsUrl": "git+https://github.com/petehunt/connect-inject.git",
      "gitUrl": "git://github.com/petehunt/connect-inject.git",
      "shortcut": "github:petehunt/connect-inject",
      "directUrl": "https://raw.githubusercontent.com/petehunt/connect-inject/master/package.json"
    }
  },
  "_requiredBy": [
    "/authbox"
  ],
  "_resolved": "git+https://github.com/petehunt/connect-inject.git#13bd55b7f07429cbda7aa74e95207a6f2f12faa6",
  "_shasum": "e4fe87ae5c78bd7793864abc5747aa06327de4fd",
  "_shrinkwrap": null,
  "_spec": "connect-inject@git+https://github.com/petehunt/connect-inject.git",
  "_where": "C:\\xampp\\htdocs\\gregg\\node_modules\\authbox",
  "author": {
    "name": "Daniel Duches",
    "email": "iridiumweb@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/danielhq/connect-inject/issues"
  },
  "dependencies": {},
  "description": "connect middleware for adding any script to the response",
  "devDependencies": {
    "express": "~3.2.2"
  },
  "email": "iridiumweb@gmail.com",
  "engines": {
    "node": "*"
  },
  "gitHead": "13bd55b7f07429cbda7aa74e95207a6f2f12faa6",
  "homepage": "https://github.com/danielhq/connect-inject#readme",
  "keywords": [
    "connect",
    "inject"
  ],
  "main": "index",
  "name": "connect-inject",
  "optionalDependencies": {},
  "readme": "connect-inject\r\n==================\r\nconnect middleware for adding any script to the response, this is a forked version of connect-livereload.\r\n\r\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to  the author.\r\n\r\nFor further documentation refer to the author's repo [connect-livereload](https://github.com/intesso/connect-livereload).\r\n\r\ninstall\r\n=======\r\n```bash\r\nnpm install connect-inject --save-dev\r\n```\r\n```git\r\ngit clone https://github.com/danielhq/connect-inject.git\r\n```\r\nuse\r\n===\r\n\r\nthis middleware can be used to inject any sort of content into the webpage e.g. [Livereload, Weinre etc]\r\n```\r\n  snippet: string | Array\r\n```\r\nsnippet now accepts either string or an array.\r\n## connect/express example\r\n```javascript\r\n  app.use(require('connect-inject')({\r\n    snippet: \"<script>alert('hello world');</script>\"\r\n  }));\r\n```\r\n\r\n\r\n## options\r\nOptions are not mandatory: `app.use(require('connect-inject')());`\r\nThe Options have to be provided when the middleware is loaded:\r\n\r\ne.g.:\r\n```\r\n  app.use(require('connect-inject')({\r\n    snippet: \"<script>alert('hello world');</script>\",\r\n    ignore: ['.js', '.svg']\r\n  }));\r\n\r\n```\r\n\r\nThese are the available options with the following defaults:\r\n\r\n```javascript\r\n  // these files will be ignored\r\n  ignore: ['.js', '.css', '.svg', '.ico', '.woff', '.png', '.jpg', '.jpeg'],\r\n\r\n  // this function is used to determine if the content of `res.write` or `res.end` is html.\r\n  html: function (str) {\r\n    return /<[:_-\\w\\s\\!\\/\\=\\\"\\']+>/i.test(str);\r\n  },\r\n\r\n  // rules are provided to find the place where the snippet should be inserted.\r\n  // the main problem is that on the server side it can be tricky to determine if a string will be valid html on the client.\r\n  // the function `fn` of the first `match` is executed like this `body.replace(rule.match, rule.fn);`\r\n  // the function `fn` has got the arguments `fn(w, s)` where `w` is the matches string and `s` is the snippet.\r\n  rules: [{\r\n    match: /<\\/body>/,\r\n    fn: prepend\r\n  }, {\r\n    match: /<\\/html>/,\r\n    fn: prepend\r\n  }, {\r\n    match: /<\\!DOCTYPE.+>/,\r\n    fn: append\r\n  }],\r\n\r\n\r\n  // snippet taks a string argument which can be anything you want, and will be appended (by default) before </body> tag\r\n  snippet: \"<script>alert('hello world');</script>\"\r\n```\r\n\r\n\r\n## grunt example\r\n\r\nThe following example is from an actual Gruntfile that uses [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect)\r\n\r\n```javascript\r\nconnect: {\r\n  options: {\r\n    port: 3000,\r\n    hostname: 'localhost'\r\n  },\r\n  dev: {\r\n    options: {\r\n      middleware: function (connect) {\r\n        return [\r\n          require('connect-inject')({ snippet: \"<script>alert('hello world');</script>\"}),\r\n          mountFolder(connect, '.tmp'),\r\n          mountFolder(connect, 'app')\r\n        ];\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nFor use as middleware in grunt simply add the following to the **top** of your array of middleware.\r\n\r\n```javascript\r\n  require('connect-inject')(),\r\n```\r\nYou can pass in options to this call if you do not want the defaults.\r\n\r\n`dev` is simply the name of the server being used with the task `grunt connect:dev`. The other items in the `middleware` array are all functions that either are of the form `function (req, res, next)` like `checkForDownload` or return that like `mountFolder(connect, 'something')`.\r\n\r\n\r\ncredits\r\n=======\r\nThis is a slightly modified version of [connect-livereload](https://github.com/intesso/connect-livereload) all the credits go to the author.\r\n\r\n\r\nlicense\r\n=======\r\n[MIT License](https://github.com/intesso/connect-livereload/blob/master/LICENSE)\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/danielhq/connect-inject/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/danielhq/connect-inject.git"
  },
  "version": "0.4.0"
}
